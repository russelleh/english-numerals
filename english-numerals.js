parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { expression: peg$parseexpression },
        peg$startRuleFunction  = peg$parseexpression,

        peg$c0 = "-",
        peg$c1 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c2 = function(e1, rem) { return e1 + rem; },
        peg$c3 = " hundred",
        peg$c4 = { type: "literal", value: " hundred", description: "\" hundred\"" },
        peg$c5 = function(e2) { return e2 * 1e2; },
        peg$c6 = " ",
        peg$c7 = { type: "literal", value: " ", description: "\" \"" },
        peg$c8 = function(e2, rem) { return e2 + rem; },
        peg$c9 = " thousand",
        peg$c10 = { type: "literal", value: " thousand", description: "\" thousand\"" },
        peg$c11 = function(e3) { return e3 * 1e3; },
        peg$c12 = function(e3, rem) { return e3 + rem; },
        peg$c13 = " million",
        peg$c14 = { type: "literal", value: " million", description: "\" million\"" },
        peg$c15 = function(e6) { return e6 * 1e6; },
        peg$c16 = function(e6, rem) { return e6 + rem; },
        peg$c17 = " billion",
        peg$c18 = { type: "literal", value: " billion", description: "\" billion\"" },
        peg$c19 = function(e9) { return e9 * 1e9; },
        peg$c20 = function(e9, rem) { return e9 + rem; },
        peg$c21 = " trillion",
        peg$c22 = { type: "literal", value: " trillion", description: "\" trillion\"" },
        peg$c23 = function(e12) { return e12 * 1e12; },
        peg$c24 = function(e12, rem) { return e12 + rem; },
        peg$c25 = " quadrillion",
        peg$c26 = { type: "literal", value: " quadrillion", description: "\" quadrillion\"" },
        peg$c27 = function(e15) { return e15 * 1e15; },
        peg$c28 = function(e15, rem) { return e15 + rem; },
        peg$c29 = " quintillion",
        peg$c30 = { type: "literal", value: " quintillion", description: "\" quintillion\"" },
        peg$c31 = function(e18) { return e18 * 1e18; },
        peg$c32 = function(e18, rem) { return e18 + rem; },
        peg$c33 = " sextillion",
        peg$c34 = { type: "literal", value: " sextillion", description: "\" sextillion\"" },
        peg$c35 = function(e21) { return e21 * 1e21; },
        peg$c36 = function(e21, rem) { return e21 + rem; },
        peg$c37 = " septillion",
        peg$c38 = { type: "literal", value: " septillion", description: "\" septillion\"" },
        peg$c39 = function(e24) { return e24 * 1e24; },
        peg$c40 = function(e24, rem) { return e24 + rem; },
        peg$c41 = "one",
        peg$c42 = { type: "literal", value: "one", description: "\"one\"" },
        peg$c43 = function() { return 1; },
        peg$c44 = "two",
        peg$c45 = { type: "literal", value: "two", description: "\"two\"" },
        peg$c46 = function() { return 2; },
        peg$c47 = "three",
        peg$c48 = { type: "literal", value: "three", description: "\"three\"" },
        peg$c49 = function() { return 3; },
        peg$c50 = "four",
        peg$c51 = { type: "literal", value: "four", description: "\"four\"" },
        peg$c52 = function() { return 4; },
        peg$c53 = "five",
        peg$c54 = { type: "literal", value: "five", description: "\"five\"" },
        peg$c55 = function() { return 5; },
        peg$c56 = "six",
        peg$c57 = { type: "literal", value: "six", description: "\"six\"" },
        peg$c58 = function() { return 6; },
        peg$c59 = "seven",
        peg$c60 = { type: "literal", value: "seven", description: "\"seven\"" },
        peg$c61 = function() { return 7; },
        peg$c62 = "eight",
        peg$c63 = { type: "literal", value: "eight", description: "\"eight\"" },
        peg$c64 = function() { return 8; },
        peg$c65 = "nine",
        peg$c66 = { type: "literal", value: "nine", description: "\"nine\"" },
        peg$c67 = function() { return 9; },
        peg$c68 = "ten",
        peg$c69 = { type: "literal", value: "ten", description: "\"ten\"" },
        peg$c70 = function() { return 10; },
        peg$c71 = "eleven",
        peg$c72 = { type: "literal", value: "eleven", description: "\"eleven\"" },
        peg$c73 = function() { return 11; },
        peg$c74 = "twelve",
        peg$c75 = { type: "literal", value: "twelve", description: "\"twelve\"" },
        peg$c76 = function() { return 12; },
        peg$c77 = "thirteen",
        peg$c78 = { type: "literal", value: "thirteen", description: "\"thirteen\"" },
        peg$c79 = function() { return 13; },
        peg$c80 = "fourteen",
        peg$c81 = { type: "literal", value: "fourteen", description: "\"fourteen\"" },
        peg$c82 = function() { return 14; },
        peg$c83 = "fifteen",
        peg$c84 = { type: "literal", value: "fifteen", description: "\"fifteen\"" },
        peg$c85 = function() { return 15; },
        peg$c86 = "sixteen",
        peg$c87 = { type: "literal", value: "sixteen", description: "\"sixteen\"" },
        peg$c88 = function() { return 16; },
        peg$c89 = "seventeen",
        peg$c90 = { type: "literal", value: "seventeen", description: "\"seventeen\"" },
        peg$c91 = function() { return 17; },
        peg$c92 = "eighteen",
        peg$c93 = { type: "literal", value: "eighteen", description: "\"eighteen\"" },
        peg$c94 = function() { return 18; },
        peg$c95 = "nineteen",
        peg$c96 = { type: "literal", value: "nineteen", description: "\"nineteen\"" },
        peg$c97 = function() { return 19; },
        peg$c98 = "twenty",
        peg$c99 = { type: "literal", value: "twenty", description: "\"twenty\"" },
        peg$c100 = function() { return 20; },
        peg$c101 = "thirty",
        peg$c102 = { type: "literal", value: "thirty", description: "\"thirty\"" },
        peg$c103 = function() { return 30; },
        peg$c104 = "forty",
        peg$c105 = { type: "literal", value: "forty", description: "\"forty\"" },
        peg$c106 = function() { return 40; },
        peg$c107 = "fifty",
        peg$c108 = { type: "literal", value: "fifty", description: "\"fifty\"" },
        peg$c109 = function() { return 50; },
        peg$c110 = "sixty",
        peg$c111 = { type: "literal", value: "sixty", description: "\"sixty\"" },
        peg$c112 = function() { return 60; },
        peg$c113 = "seventy",
        peg$c114 = { type: "literal", value: "seventy", description: "\"seventy\"" },
        peg$c115 = function() { return 70; },
        peg$c116 = "eighty",
        peg$c117 = { type: "literal", value: "eighty", description: "\"eighty\"" },
        peg$c118 = function() { return 80; },
        peg$c119 = "ninety",
        peg$c120 = { type: "literal", value: "ninety", description: "\"ninety\"" },
        peg$c121 = function() { return 90; },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseexpression() {
      var s0;

      s0 = peg$parsesub_e27();

      return s0;
    }

    function peg$parsesub_e1() {
      var s0;

      s0 = peg$parsenum_9();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenum_8();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenum_7();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenum_6();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenum_5();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenum_4();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsenum_3();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsenum_2();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsenum_1();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserange_10_19() {
      var s0;

      s0 = peg$parsenum_19();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenum_18();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenum_17();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenum_16();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenum_15();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenum_14();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsenum_13();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsenum_12();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsenum_11();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsenum_10();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserange_1_19() {
      var s0;

      s0 = peg$parserange_10_19();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e1();
      }

      return s0;
    }

    function peg$parserange_20_90_mult_10() {
      var s0;

      s0 = peg$parsenum_20();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenum_30();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenum_40();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenum_50();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenum_60();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenum_70();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsenum_80();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsenum_90();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserange_21_99_sans_10() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parserange_20_90_mult_10();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c0;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e1();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c2(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e2() {
      var s0;

      s0 = peg$parserange_21_99_sans_10();
      if (s0 === peg$FAILED) {
        s0 = peg$parserange_20_90_mult_10();
        if (s0 === peg$FAILED) {
          s0 = peg$parserange_1_19();
        }
      }

      return s0;
    }

    function peg$parsesub_e3_mult_e2() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c3) {
          s2 = peg$c3;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e3_sans_e2() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3_mult_e2();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e2();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e3() {
      var s0;

      s0 = peg$parsesub_e3_sans_e2();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e3_mult_e2();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e2();
        }
      }

      return s0;
    }

    function peg$parsesub_e6_mult_e3() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c9) {
          s2 = peg$c9;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e6_sans_e3() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e6_mult_e3();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e3();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e6() {
      var s0;

      s0 = peg$parsesub_e6_sans_e3();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e6_mult_e3();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e3();
        }
      }

      return s0;
    }

    function peg$parsesub_e9_mult_e6() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c13) {
          s2 = peg$c13;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c15(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e9_sans_e6() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e9_mult_e6();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e6();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e9() {
      var s0;

      s0 = peg$parsesub_e9_sans_e6();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e9_mult_e6();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e6();
        }
      }

      return s0;
    }

    function peg$parsesub_e12_mult_e9() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c17) {
          s2 = peg$c17;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e12_sans_e9() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e12_mult_e9();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e9();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e12() {
      var s0;

      s0 = peg$parsesub_e12_sans_e9();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e12_mult_e9();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e9();
        }
      }

      return s0;
    }

    function peg$parsesub_e15_mult_e12() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c21) {
          s2 = peg$c21;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c23(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e15_sans_e12() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e15_mult_e12();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e12();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e15() {
      var s0;

      s0 = peg$parsesub_e15_sans_e12();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e15_mult_e12();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e12();
        }
      }

      return s0;
    }

    function peg$parsesub_e18_mult_e15() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c25) {
          s2 = peg$c25;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e18_sans_e15() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e18_mult_e15();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e15();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c28(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e18() {
      var s0;

      s0 = peg$parsesub_e18_sans_e15();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e18_mult_e15();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e15();
        }
      }

      return s0;
    }

    function peg$parsesub_e21_mult_e18() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c29) {
          s2 = peg$c29;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e21_sans_e18() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e21_mult_e18();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e18();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e21() {
      var s0;

      s0 = peg$parsesub_e21_sans_e18();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e21_mult_e18();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e18();
        }
      }

      return s0;
    }

    function peg$parsesub_e24_mult_e21() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c33) {
          s2 = peg$c33;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e24_sans_e21() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e24_mult_e21();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e21();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e24() {
      var s0;

      s0 = peg$parsesub_e24_sans_e21();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e24_mult_e21();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e21();
        }
      }

      return s0;
    }

    function peg$parsesub_e27_mult_e24() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesub_e3();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c37) {
          s2 = peg$c37;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e27_sans_e24() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesub_e27_mult_e24();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesub_e24();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c40(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub_e27() {
      var s0;

      s0 = peg$parsesub_e27_sans_e24();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_e27_mult_e24();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_e24();
        }
      }

      return s0;
    }

    function peg$parsenum_1() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c41) {
        s1 = peg$c41;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c43();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c46();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c47) {
        s1 = peg$c47;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c49();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c50) {
        s1 = peg$c50;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c52();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_5() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c53) {
        s1 = peg$c53;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_6() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c56) {
        s1 = peg$c56;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_7() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c61();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_8() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_9() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c65) {
        s1 = peg$c65;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c67();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_10() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c70();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_11() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c71) {
        s1 = peg$c71;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c73();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_12() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c76();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_13() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_14() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c82();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_15() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c85();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_16() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_17() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_18() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_19() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c97();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_20() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c98) {
        s1 = peg$c98;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c100();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_30() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c101) {
        s1 = peg$c101;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c103();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_40() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c104) {
        s1 = peg$c104;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c106();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_50() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c107) {
        s1 = peg$c107;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c109();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_60() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c110) {
        s1 = peg$c110;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c112();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_70() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c115();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_80() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c116) {
        s1 = peg$c116;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenum_90() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c119) {
        s1 = peg$c119;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c121();
      }
      s0 = s1;

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
